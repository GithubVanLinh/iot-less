#!/usr/bin/env node

/**
 * Module dependencies.
 */
const THModel = require("../models/th.model");
const Led = require("../status/led");

var app = require("../app");
var debug = require("debug")("socket-server:server");
var http = require("http");
// var https = require("https");
// const fs = require('fs');
// const options = {
//   key: fs.readFileSync('key.pem'),
//   cert: fs.readFileSync('cert.pem')
// };
var WebSocket = require("ws");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */
// var server = https.createServer(options, app);
var server = http.createServer(app);
// const options = {
// };
// const io = require("socket.io")(server, options);

// io.on("connection", (socket) => {
//   socket.emit("mgs", "hello");
// });

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

var ws = new WebSocket.Server({
  server,
});
var clients = [];

function broadcast(socket, data) {
  console.log(clients.length);
  for (var i = 0; i < clients.length; i++) {
    clients[i].send(data);
  }
}
ws.on("connection", async function (socket, req) {
  clients.push(socket);

  var thData = await THModel.getTop("5fa7dee2d608ce50b8057128");
  const thString = JSON.stringify(thData);
  console.log(thString);
  socket.send(thString);
  socket.send(Led.getLedStatus());
  console.log("A new connection");
  socket.on("message", async function (message) {
    console.log(message);
    if (message === "LED_OFF") {
      Led.setLedStatus(message);
      broadcast(socket, message);
    }
    if (message === "LED_ON") {
      Led.setLedStatus(message);
      broadcast(socket, message);
    }
    try {
      const messageJson = JSON.parse(String(message));
      if (messageJson.temperature && messageJson.humidity) {
        console.log(messageJson);
        messageJson.id = "5fa7dee2d608ce50b8057128";
        messageJson.date = Date.now();
        console.log(messageJson);
        await THModel.add(messageJson);
        broadcast(socket, message);
      }
    } catch (error) {}
  });
  socket.on("close", function () {
    var index = clients.indexOf(socket);
    clients.splice(index, 1);
    console.log("disconnected");
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
